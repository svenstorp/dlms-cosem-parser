import { DLMSCOSEMParser } from '../index';

const testDataGarb: Buffer = Buffer.from([0x99, 0xaa, 0x66, 0xbb, 0xaa, 0x99, 0xee]);

const testData1: Buffer = Buffer.from([0x99, 0xaa, 0x66, 0xbb, 
  0x7e, 0xa2, 0x43, 0x41, 0x08, 0x83, 0x13, 0x85, 0xeb, 0xe6, 0xe7, 0x00, 0x0f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x1b, 0x02, 0x02, 0x09, 0x06, 0x00, 0x00, 0x01, 0x00, 0x00, 0xff, 0x09, 0x0c, 0x07, 0xe6, 0x01, 0x16, 0x06, 0x14,
  0x1a, 0x1e, 0xff, 0x80, 0x00, 0xff, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x01, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00,
  0x04, 0xfb, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1b, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x02, 0x07, 0x00, 0xff, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1b, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x03, 0x07, 0x00
]);

 const testData2: Buffer = Buffer.from([
  0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1d, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x04,
  0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x02, 0xbf, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1d, 0x02, 0x03, 0x09, 0x06, 0x01,
  0x00, 0x1f, 0x07, 0x00, 0xff, 0x10, 0x00, 0x09, 0x02, 0x02, 0x0f, 0xff, 0x16, 0x21, 0x02, 0x03, 0x09, 0x06, 0x01,
  0x00, 0x33, 0x07, 0x00, 0xff, 0x10, 0x00, 0x2e, 0x02, 0x02, 0x0f, 0xff, 0x16, 0x21, 0x02, 0x03, 0x09, 0x06, 0x01,
  0x00, 0x47, 0x07, 0x00, 0xff, 0x10, 0x00, 0x0c, 0x02, 0x02, 0x0f, 0xff, 0x16, 0x21, 0x02, 0x03, 0x09, 0x06, 0x01,
  0x00, 0x20, 0x07, 0x00, 0xff, 0x12, 0x09, 0x28, 0x02, 0x02, 0x0f, 0xff, 0x16, 0x23, 0x02, 0x03, 0x09, 0x06, 0x01,
  0x00, 0x34, 0x07, 0x00, 0xff, 0x12, 0x09, 0x1d, 0x02, 0x02, 0x0f, 0xff, 0x16, 0x23, 0x02, 0x03, 0x09, 0x06, 0x01,
  0x00, 0x48, 0x07, 0x00, 0xff, 0x12, 0x09, 0x27, 0x02, 0x02, 0x0f, 0xff, 0x16, 0x23, 0x02, 0x03, 0x09, 0x06, 0x01,
  0x00, 0x15, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x25, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1b, 0x02, 0x03, 0x09,
  0x06, 0x01, 0x00, 0x16, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1b, 0x02
]);

const testData3: Buffer = Buffer.from([
  0x03, 0x09, 0x06, 0x01, 0x00, 0x17, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0f, 0x00, 0x16,
  0x1d, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x18, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0xcf, 0x02, 0x02, 0x0f,
  0x00, 0x16, 0x1d, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x29, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x04, 0x19, 0x02,
  0x02, 0x0f, 0x00, 0x16, 0x1b, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x2a, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1b, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x2b, 0x07, 0x00, 0xff, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1d, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x2c, 0x07, 0x00, 0xff,
  0x06, 0x00, 0x00, 0x01, 0x18, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1d, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x3d, 0x07,
  0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0xbd, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1b, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00,
  0x3e, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1b, 0x02, 0x03, 0x09, 0x06,
  0x01, 0x00, 0x3f, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1d, 0x02, 0x03,
  0x09, 0x06, 0x01, 0x00, 0x40, 0x07, 0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0xd9, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x1d,
  0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x01, 0x08, 0x00, 0xff, 0x06, 0x00, 0x91, 0x64, 0xbb, 0x02, 0x02, 0x0f, 0x00,
  0x16, 0x1e, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x02, 0x08, 0x00, 0xff, 0x06, 0x00, 0x48, 0x89, 0xfc, 0x02, 0x02,
  0x0f, 0x00, 0x16, 0x1e, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x03, 0x08, 0x00, 0xff, 0x06, 0x00, 0x00, 0x02, 0x03,
  0x02, 0x02, 0x0f, 0x00, 0x16, 0x20, 0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x04, 0x08, 0x00, 0xff, 0x06, 0x00, 0x55,
  0xc2, 0x38, 0x02, 0x02, 0x0f, 0x00, 0x16, 0x20, 0x0c, 0x17, 0x7e,
]);

function replacer(key: any, value: any) {
  if (value instanceof Map) {
    return Object.fromEntries(value.entries());
  } else {
    return value;
  }
}

test('Validate parser', () => {
  let parser: DLMSCOSEMParser = new DLMSCOSEMParser();
  parser.parsedDataAvailable.subscribe((meterData) => {
    console.log(JSON.stringify(meterData, replacer));
  });
  parser.pushData(testDataGarb);
  parser.pushData(testData1);
  parser.pushData(testData2);
  parser.pushData(testData3);
  console.log(JSON.stringify(parser.result(), replacer));
});
